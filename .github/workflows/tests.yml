name: tests

# Triggers the workflow on push or pull request events
on: [push, pull_request]
# Limiting to particular branches might be helpful to conserve minutes.
#on:
  # push:
  #   branches: [ $default-branch ]
  # pull_request:
  #   branches: [ $default-branch ]

env:
  # Weirdly, this has to be a top-level key, not ``defaults.env``
  PYTHONHASHSEED: 8675309
  PYTHONUNBUFFERED: 1
  PYTHONDONTWRITEBYTECODE: 1
  PYTHONDEVMODE: 1
  PYTHONFAULTHANDLER: 1

  PIP_UPGRADE_STRATEGY: eager
  # Don't get warnings about Python 2 support being deprecated. We
  # know. The env var works for pip 20.
  PIP_NO_PYTHON_VERSION_WARNING: 1
  PIP_NO_WARN_SCRIPT_LOCATION: 1

  CFLAGS: -Ofast -pipe
  CXXFLAGS: -Ofast -pipe
  # Uploading built wheels for releases.
  # TWINE_PASSWORD is encrypted and stored directly in the
  # github repo settings.
  TWINE_USERNAME: __token__

  ###
  # caching
  # This is where we'd set up ccache, but this compiles so fast its not worth it.
  ###



jobs:
  build-zope_hookable:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version: [2.7, pypy-2.7, pypy-3.6, 3.5, 3.6, 3.7, 3.8, 3.9]
        os: [ubuntu-20.04, macos-latest]
        exclude:
          - os: macos-latest
            python-version: pypy-2.7
          - os: macos-latest
            python-version: pypy-3.6
          - os: macos-latest
            python-version: 3.5

    steps:
      - name: checkout
        uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      ###
      # Caching.
      # This actually *restores* a cache and schedules a cleanup action
      # to save the cache. So it must come before the thing we want to use
      # the cache.
      ###
      - name: Get pip cache dir
        id: pip-cache
        run: |
          echo "::set-output name=dir::$(pip cache dir)"

      - name: pip cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Build Dependencies
        run: |
          pip install -U pip
          pip install -U setuptools wheel twine
          pip install -U coveralls coverage

      - name: Build zope.hookable
        run: |
          # Next, build the wheel *in place*. This helps ccache, and also lets us cache the configure
          # output (pip install uses a random temporary directory, making this difficult).
          python setup.py build_ext -i
          python setup.py bdist_wheel
          # Also install it, so that we get dependencies in the (pip) cache.
          pip install -U coverage
          pip install -U 'faulthandler; python_version == "2.7" and platform_python_implementation == "CPython"'
          pip install .[test]

      - name: Check zope.hookable build
        run: |
          ls -l dist
          twine check dist/*
      - name: Upload zope.hookable wheel
        uses: actions/upload-artifact@v2
        with:
          name: zope.hookable-${{ runner.os }}-${{ matrix.python-version }}.whl
          path: dist/*whl
      - name: Publish package to PyPI (mac)
        # We cannot 'uses: pypa/gh-action-pypi-publish@v1.4.1' because
        # that's apparently a container action, and those don't run on
        # the Mac.
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags') && startsWith(runner.os, 'Mac')
        env:
          TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}
        run: |
          twine upload --skip-existing dist/*

  test:
    needs: build-zope_hookable
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version: [2.7, pypy-2.7, pypy-3.6, 3.5, 3.6, 3.7, 3.8, 3.9]
        os: [ubuntu-20.04, macos-latest]
        exclude:
          - os: macos-latest
            python-version: pypy-2.7
          - os: macos-latest
            python-version: pypy-3.6
          - os: macos-latest
            python-version: 3.5

    steps:
      - name: checkout
        uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Get pip cache dir
        id: pip-cache
        run: |
          echo "::set-output name=dir::$(pip cache dir)"

      - name: pip cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Download zope.hookable wheel
        uses: actions/download-artifact@v2
        with:
          name: zope.hookable-${{ runner.os }}-${{ matrix.python-version }}.whl
          path: dist/
      - name: Install zope.hookable
        # ``python -m unittest discover`` only works with editable
        # installs, so we have to duplicate some work and can't
        # install the built wheel. (zope.testrunner
        # works fine with non-editable installs.)
        run: |
          pip install -U wheel
          pip install -U coverage
          pip install -U 'faulthandler; python_version == "2.7" and platform_python_implementation == "CPython"'
          # Unzip into src/ so that testrunner can find the .so files
          # when we ask it to load tests from that directory. This
          # might also save some build time?
          unzip -n dist/zope.hookable-*whl -d src
          pip install -U -e .[test]
      - name: Run tests and report coverage
        # Once with C extensions, once without. Yes, this runs them
        # twice on PyPy.
        run: |
          coverage run -p -m unittest discover -s src
          PURE_PYTHON=1 coverage run -p -m unittest discover -s src
          coverage combine
          coverage report -i
      - name: Submit to Coveralls
        # This is a container action, which only runs on Linux.
        if: ${{ startsWith(runner.os, 'Linux') }}
        uses: AndreMiras/coveralls-python-action@develop
        with:
          parallel: true

  coveralls_finish:
    needs: test
    runs-on: ubuntu-20.04
    steps:
    - name: Coveralls Finished
      uses: AndreMiras/coveralls-python-action@develop
      with:
        parallel-finished: true

  lint:
    needs: build-zope_hookable
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version: [3.9]
        os: [ubuntu-20.04]

    steps:
      - name: checkout
        uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Get pip cache dir
        id: pip-cache
        run: |
          echo "::set-output name=dir::$(pip cache dir)"

      - name: pip cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Download zope.hookable wheel
        uses: actions/download-artifact@v2
        with:
          name: zope.hookable-${{ runner.os }}-${{ matrix.python-version }}.whl
          path: dist/
      - name: Install zope.hookable
        run: |
          pip install -U pip
          pip install -U wheel
          pip install -U `ls dist/zope.hookable-*`[test]
      - name: Lint
        # We only need to do this on one version, and it should be Python 3, because
        # pylint has stopped updating for Python 2.
        # TODO: Pick a linter and configuration and make this step right.
        run: |
          pip install -U pylint
          # python -m pylint --limit-inference-results=1 --rcfile=.pylintrc zope.hookable -f parseable -r n

  manylinux:
    runs-on: ubuntu-20.04
    # We use a regular Python matrix entry to share as much code as possible.
    strategy:
      matrix:
        python-version: [3.9]
        image: [manylinux2010_x86_64, manylinux2010_i686, manylinux2014_aarch64]

    steps:
      - name: checkout
        uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Get pip cache dir
        id: pip-cache
        run: |
          echo "::set-output name=dir::$(pip cache dir)"

      - name: pip cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip_manylinux-${{ matrix.image }}-${{ matrix.python-version }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Update pip
        run: pip install -U pip
      - name: Build zope.hookable (x86_64)
        if: matrix.image == 'manylinux2010_x86_64'
        # An alternate way to do this is to run the container directly with a uses:
        # and then the script runs inside it. That may work better with caching.
        # See https://github.com/pyca/bcrypt/blob/f6b5ee2eda76d077c531362ac65e16f045cf1f29/.github/workflows/wheel-builder.yml
        # The 2010 image is the most recent spec that comes with Python 2.7,
        # and only up through the tag 2021-02-06-3d322a5
        env:
          DOCKER_IMAGE: quay.io/pypa/${{ matrix.image }}:2021-02-06-3d322a5
        run: |
          bash .manylinux.sh
      - name: Build zope.hookable (i686)
        if: matrix.image == 'manylinux2010_i686'
        env:
          DOCKER_IMAGE: quay.io/pypa/${{ matrix.image }}:2021-02-06-3d322a5
          PRE_CMD: linux32
        run: |
          bash .manylinux.sh
      - name: Build zope.hookable (aarch64)
        if: matrix.image == 'manylinux2014_aarch64'
        env:
          DOCKER_IMAGE: quay.io/pypa/${{ matrix.image }}
        run: |
          # First we must enable emulation
          docker run --rm --privileged hypriot/qemu-register
          bash .manylinux.sh

      - name: Upload zope.hookable wheels
        uses: actions/upload-artifact@v2
        with:
          path: wheelhouse/*whl
          name: manylinux_${{ matrix.image }}_wheels.zip
      - name: Restore pip cache permissions
        run: sudo chown -R $(whoami) ${{ steps.pip-cache.outputs.dir }}
      - name: Publish package to PyPI
        uses: pypa/gh-action-pypi-publish@v1.4.1
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
        with:
          user: __token__
          password: ${{ secrets.TWINE_PASSWORD }}
          skip_existing: true
          packages_dir: wheelhouse/
